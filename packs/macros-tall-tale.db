{"_id":"euVqlYfll65zKOew","name":"Character creation","type":"script","author":"pdXclp2r5tiEF79G","img":"icons/svg/dice-target.svg","scope":"global","command":"const characterGenerator = game.pirateborg.api.characterGenerator;\n\nconst tallTaleRollPack = 'pirateborg.rolls-tall-tale';\nconst tallTaleRollPackName = 'Tall Tale';\nconst aquaticMutantRollPackName = 'Aquatic Mutant';\nconst sentientAnimalRollPackName = 'Sentient Animal';\n\nconst getRandomBaseClass = () => {\n  const validBaseClasses = selectedClasses.filter((selectedClass) => !selectedClass.data.data.requireBaseClass);\n  return baseClass = validBaseClasses[Math.floor(Math.random() * validBaseClasses.length)];\n}\n\nconst getClassItems = async (selectedClass) => {\n  return [\n    ...(await characterGenerator.rollRollItems(selectedClass.data.data.startingRolls)),\n    ...(await game.pirateborg.api.compendium.findItemsFromCompendiumString(selectedClass.data.data.startingItems)),\n  ];\n}\n\nconst getStartingBonusItems = async (items) => {\n  return [\n    ...(await characterGenerator.findStartingBonusItems(items)),\n    ...(await characterGenerator.findStartingBonusRollsItems(items)),\n  ];\n}\n\nconst getPirateDataWithBaseClass = async (additionalItems = []) => {\n  const baseClass = getRandomBaseClass(); \n  const pirateData = await characterGenerator.rollCharacterForClass(baseClass);\n  const items = await getClassItems(selectedClass);     \n  const bonusItems = await getStartingBonusItems([...items, ...additionalItems]);\n  baseClass.isBaseClass = true;\n\n  pirateData.items = pirateData.items\n    .filter((item) => item.data.type !== 'class')\n    .concat(items)\n    .concat(additionalItems)\n    .concat(bonusItems)\n    .concat([baseClass])\n    .concat([selectedClass]);\n\n  return pirateData;\n}\n\nconst animalDefaultData = {\n  startingAbilityScoreFormula: '3d6',\n  startingStrengthBonus: -2,\n  startingAgilityBonus: -2,\n  startingPresenceBonus: -2,\n  startingToughnessBonus: -2,\n  startingSpiritBonus: -2,\n  luckDie: '1d4',\n  flavorText: '',\n  startingMacro: '',\n}\n\nconst createSentientAnimalData = async (data) => {\n  return mergeObject(animalDefaultData, data, { insertKeys: true });\n}\n\nconst getMerfolkData = async (tallTaleItem) => {\n  const pirateData = await getPirateDataWithBaseClass();\n  pirateData.description = `<p>${tallTaleItem.data.data.flavorText}</p>${pirateData.description}`\n  pirateData.actorImg = tallTaleItem.data.img;\n\n  const selectedClass = pirateData.items.find((item) => item.type === 'class' && item.isBaseClass === false);\n  selectedClass.data.name = `${selectedClass.data.name} - ${tallTaleItem.data.name}`;\n  return pirateData;\n}\n\nconst getAquaticMutantData = async (tallTaleItem) => {\n  const aquaticMutantItem = (await game.pirateborg.api.compendium.drawTableItem(tallTaleRollPack, aquaticMutantRollPackName))[0];\n  const pirateData = await getPirateDataWithBaseClass([aquaticMutantItem]);\n  pirateData.description = `<p>${tallTaleItem.data.data.flavorText} (${aquaticMutantItem.data.name})</p>${pirateData.description}`\n\n  if (aquaticMutantItem.data.name === 'Electric Eel') {\n     pirateData.agility = parseInt(pirateData.agility, 10) + 1;\n  }\n\n  pirateData.actorImg = aquaticMutantItem.data.img;\n  const selectedClass = pirateData.items.find((item) => item.type === 'class' && item.isBaseClass === false);\n  selectedClass.data.name = `${selectedClass.data.name} - ${tallTaleItem.data.name} - ${aquaticMutantItem.data.name}`;\n\n  if(aquaticMutantItem.name === 'The Great Old One') {\n    pirateData.items\n     .filter((item) => item.type === 'invokable')\n     .forEach((item) => {\n       item.data.data.isEquipment = false;\n     });\n  }\n\n  return pirateData;\n}\n\nconst getSentientAnimalData = async (tallTaleItem) => {\n  const sentientAnimalItem = (await game.pirateborg.api.compendium.drawTableItem(tallTaleRollPack, sentientAnimalRollPackName))[0];\n  let data = {};\n  switch (sentientAnimalItem.name) {\n    case 'Foul Fowl':\n      data = await createSentientAnimalData({\n        startingSpiritBonus: +3,\n        startingHitPoints: '1d4',        \n      }); \n      break;\n    case 'Jaguar':\n      data = await createSentientAnimalData({\n        startingAgilityBonus: +2,\n        startingStrengthBonus: +2,\n        startingHitPoints: '1d8',        \n      });\n      break;\n    case 'Crocodile':\n      data = await createSentientAnimalData({\n        startingToughnessBonus: +1,\n        startingStrengthBonus: +3,\n        startingHitPoints: '1d10',        \n      });\n      break;\n    case 'Bilge Rat':\n      data = await createSentientAnimalData({\n        startingToughnessBonus: +2,\n        startingAgilityBonus: +3,\n        startingHitPoints: '1d2',        \n      });\n      break;\n    case 'Lucky Parrot':\n      data = await createSentientAnimalData({\n        startingPresenceBonus: +2,\n        startingAgilityBonus: +1,\n        startingHitPoints: '1d2',        \n        luckDie: '1d6'\n      });\n      break;\n    case 'Clever Monkey':\n      data = await createSentientAnimalData({\n        startingPresenceBonus: 0,\n        startingAgilityBonus: +2,\n        startingStrengthBonus: -1,\n        startingHitPoints: '1d6',        \n        startingWeaponTableFormula: '1d10',\n      });\n      break;   \n  }\n  \n  selectedClass.data.data = data;\n  selectedClass.data.name = `${selectedClass.data.name} - ${tallTaleItem.data.name} - ${sentientAnimalItem.name}`;\n  selectedClass.data.img = sentientAnimalItem.data.img;\n  selectedClass.data.data.startingRolls = sentientAnimalItem.data.data.startingBonusRolls;\n  selectedClass.data.data.startingItems = sentientAnimalItem.data.data.startingBonusItems;\n  selectedClass.data.data.flavorText = `${tallTaleItem.data.data.flavorText} (${sentientAnimalItem.data.name})`\n\n  const pirateData = await characterGenerator.rollCharacterForClass(selectedClass);\n\n  if(sentientAnimalItem.name === 'Foul Fowl') {\n    pirateData.items\n     .filter((item) => item.type === 'invokable')\n     .forEach((item) => {\n       item.data.data.isEquipment = false;\n     });\n  }\n\n  pirateData.items = pirateData.items.concat([sentientAnimalItem]);\n  return pirateData;\n}\n\n\nconst tallTaleItem = (await game.pirateborg.api.compendium.drawTableItem(tallTaleRollPack, tallTaleRollPackName))[0];\nlet pirateData = {};\n\nswitch (tallTaleItem.name) {\n  case 'Merfolk':\n    pirateData = await getMerfolkData(tallTaleItem);\n    break;\n  case 'Aquatic Mutant':\n    pirateData = await getAquaticMutantData(tallTaleItem);\n    break;\n  case 'Sentient Animal':\n    pirateData = await getSentientAnimalData(tallTaleItem);\n    break;\n}\n\npirateData.items = pirateData.items.concat([tallTaleItem])\n\nif (actor) {\n   await characterGenerator.updateActorWithCharacter(actor, pirateData);\n} else {\n   await characterGenerator.createActorWithCharacter(pirateData);\n}","folder":null,"sort":0,"permission":{"default":0,"pdXclp2r5tiEF79G":3},"flags":{"core":{"sourceId":"Macro.JMLpUPK7oJ10cb4A"}}}
